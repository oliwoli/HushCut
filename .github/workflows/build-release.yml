name: Build and optionally make Release

on:
  push:
    branches:
      - '**'
    tags:
      # It's good practice to be more specific, e.g., 'v*.*.*'
      - '*'

env:
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  #===================================================================
  # JOB 1: Build binaries for each platform in parallel
  #===================================================================
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            ext: ''
            label: linux
          - os: windows-latest
            platform: windows/amd64
            ext: .exe
            label: windows
          - os: macos-latest
            platform: darwin/universal
            ext: ''
            label: macos

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r python-backend/requirements.txt
          python -m pip install pyinstaller

      - name: Build Python backend
        run: |
          pyinstaller python-backend/src/HushCut.py --name python_backend -y
          mkdir -p build/bin/python_backend
          cp dist/python_backend/python_backend${{ matrix.ext }} build/bin/python_backend/python_backend${{ matrix.ext }}
          if [ -d dist/python_backend/_internal ]; then
            cp -r dist/python_backend/_internal build/bin/python_backend/
          fi
          rm -rf dist build/python_backend

      - name: Copy Lua script
        run: cp python-backend/src/HushCut.lua build/bin/

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Make public_key files
        run: |
          mkdir -p secrets
          echo "${{ secrets.LICENSE_PUBLIC_KEY }}" > secrets/public_key.pem

      - name: Build Wails App
        uses: dAppServer/wails-build-action@6f01580fdf9e01042bcf2ebe288a934e0d6eb4e2
        with:
          build-name: HushCut
          build-platform: ${{ matrix.platform }}
          package: false

      - name: Delete python_backend
        run: rm -rf build/bin/python_backend

      - name: Add macOS Resources folder and cleanup
        if: matrix.label == 'macos'
        run: |
          RESOURCE_DIR="build/bin/HushCut.app/Contents/Resources"
          mkdir -p "$RESOURCE_DIR"
          rm -f build/bin/HushCut.app.zip
          rm -f build/bin/HushCut.pkg

      - name: Install latest gon for notarization
        if: matrix.label == 'macos'
        run: |
          brew uninstall gon || true
          brew install Bearer/tap/gon

      - name: Import Code-Signing Certificates for macOS
        if: matrix.label == 'macos'
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          p12-file-base64: "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}"
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

      - name: Sign our macOS binary
        if: matrix.label == 'macos'
        env:
          AC_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          AC_PASSWORD: ${{ secrets.APPLE_ID_APP_SPECIFIC_PASSWORD }}
          AC_PROVIDER: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Signing Package"
          gon -log-level=info ./code-signing/gon-sign.json
          # zip the .app folder
          zip -r HushCut-macOS.zip HushCut.app

      - name: Package Release Asset
        # This step will only run when you push a tag
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd build/bin
          ARTIFACT_FILENAME="HushCut-${{ matrix.label }}.zip"
          if [[ "${{ matrix.label }}" == "macos" ]]; then
            # 'gon' creates 'HushCut-macOS.zip', so we just move it
            mv HushCut-macOS.zip "../../${ARTIFACT_FILENAME}"
          elif [[ "${{ matrix.label }}" == "windows" ]]; then
            powershell -Command "Compress-Archive -Path ./* -DestinationPath ../../${ARTIFACT_FILENAME}"
          else # Linux
            zip -r "../../${ARTIFACT_FILENAME}" .
          fi

      - name: Upload Release Asset as Artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4.6.2
        with:
          name: HushCut-${{ matrix.label }} # Unique artifact name per platform
          path: HushCut-${{ matrix.label }}.zip # Path to the packaged file

  #===================================================================
  # JOB 2: Publish all binaries to the public repository
  # This job runs only on tag pushes and after all builds succeed.
  #===================================================================
  publish:
    name: Publish to Public Repo
    needs: build # Ensures this job runs only after the 'build' job completes
    if: startsWith(github.ref, 'refs/tags/') # Condition to run only for tags
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permission to push to the repository

    steps:
      - name: Checkout current repo (for package.json)
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts into an 'artifacts' directory

      - name: Display downloaded file structure
        run: ls -R artifacts

      - name: Checkout public releases repo
        uses: actions/checkout@v4
        with:
          repository: oliwoli/hushcut-releases
          token: ${{ secrets.GH_PUBLISH_TOKEN }}
          path: public-repo

      - name: Organize artifacts and push to public repo
        run: |
          # Create destination directories
          mkdir -p public-repo/build/macos
          mkdir -p public-repo/build/windows
          mkdir -p public-repo/build/linux

          # Copy package.json from the main repo
          echo "Copying package.json"
          cp package.json public-repo/package.json

          # Copy artifacts into the public repo checkout
          # Note: download-artifact creates subdirectories named after the artifact
          echo "Copying artifacts"
          cp artifacts/HushCut-linux/HushCut-linux.zip public-repo/build/linux/
          cp artifacts/HushCut-windows/HushCut-windows.zip public-repo/build/windows/
          cp artifacts/HushCut-macos/HushCut-macos.zip public-repo/build/macos/HushCut-macOS.zip

          # Commit and push changes to the public repo
          cd public-repo
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add build/ package.json
          
          # Commit only if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update build artifacts and package.json for tag ${{ github.ref_name }}"
            git push
          fi