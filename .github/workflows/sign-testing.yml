name: Build and optionally make Release

on:
  push:
    branches:
      - '**'
    tags:
      - '*'

env:
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux/amd64
            ext: ''
            label: linux
          - os: windows-latest
            platform: windows/amd64
            ext: .exe
            label: windows
          - os: macos-latest
            platform: darwin/universal
            ext: ''
            label: macos

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # - name: Set up Go
      #   uses: actions/setup-go@v5
      #   with:
      #     go-version: '1.22'

      - name: MacOS download gon for code signing and app notarization
        if: matrix.label == 'macos'
        run: |
          brew install Bearer/tap/gon

      - name: Import Code-Signing Certificates for macOS
        if: matrix.label == 'macos'
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: "${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}"
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      - name: Sign our macOS binary
        if: matrix.label == 'macos'
        env:
          AC_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          AC_PASSWORD: ${{ secrets.APPLE_ID_APP_SPECIFIC_PASSWORD }}
        run: |
          echo "Signing Package"
          gon -log-level=info ./code-signing/gon-sign.json

      - name: Move binaries to macOS Resources folder
        if: matrix.label == 'macos'
        run: |
          RESOURCE_DIR="build/bin/HushCut.app/Contents/Resources"
          mkdir -p "$RESOURCE_DIR"
          rm -f build/bin/HushCut.app.zip
          rm -f build/bin/HushCut.pkg

      - name: delete python_backend
        run: |
          rm -rf build/bin/python_backend
      
      - name: Zip bin folder
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd build/bin
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell -Command "Compress-Archive -Path ./* -DestinationPath ../../HushCut-${{ github.ref_name }}-${{ matrix.label }}.zip"
          else
            zip -r ../../HushCut-${{ github.ref_name }}-${{ matrix.label }}.zip .
          fi
      
      - name: Get Dropbox access token
        if: startsWith(github.ref, 'refs/tags/')
        id: dropbox
        run: |
          ACCESS_TOKEN=$(curl -s -X POST https://api.dropbox.com/oauth2/token \
            -u "${{ secrets.DROPBOX_KEY }}:${{ secrets.DROPBOX_SECRET }}" \
            -d grant_type=refresh_token \
            -d refresh_token="${{ secrets.DROPBOX_REFRESH_TOKEN }}" \
            | jq -r '.access_token')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Upload to Dropbox
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          FILENAME="HushCut-${{ github.ref_name }}-${{ matrix.label }}.zip"
          echo "Uploading $FILENAME to Dropbox..."
          curl -X POST https://content.dropboxapi.com/2/files/upload \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --header "Dropbox-API-Arg: {\"path\": \"/releases/$FILENAME\",\"mode\": \"add\",\"autorename\": true,\"mute\": false}" \
            --header "Content-Type: application/octet-stream" \
            --data-binary @"$FILENAME"

      # - name: Upload artifact
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: HushCut-${{ github.ref_name }}-${{ matrix.label }}
      #     path: HushCut-${{ github.ref_name }}-${{ matrix.label }}.zip

  # upload-release-assets:
  #   env:
  #     IS_TAG: ${{ startsWith(github.ref, 'refs/tags/') }}
  #   if: startsWith(github.ref, 'refs/tags/')
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: artifacts
  #         merge-multiple: true

  #     - name: Display downloaded files
  #       run: ls -R artifacts

  #     - name: Get short-lived access token
  #       id: dropbox
  #       run: |
  #         ACCESS_TOKEN=$(curl -s -X POST https://api.dropbox.com/oauth2/token \
  #           -u "${{ secrets.DROPBOX_KEY }}:${{ secrets.DROPBOX_SECRET }}" \
  #           -d grant_type=refresh_token \
  #           -d refresh_token="${{ secrets.DROPBOX_REFRESH_TOKEN }}" \
  #           | jq -r '.access_token')
  #         echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

  #     - name: Upload to Dropbox
  #       run: |
  #         for f in artifacts/*.zip; do
  #           FILENAME=$(basename "$f")
  #           echo "Uploading $f to Dropbox..."
  #           curl -X POST https://content.dropboxapi.com/2/files/upload \
  #             --header "Authorization: Bearer $ACCESS_TOKEN" \
  #             --header "Dropbox-API-Arg: {\"path\": \"/releases/$FILENAME\",\"mode\": \"add\",\"autorename\": true,\"mute\": false}" \
  #             --header "Content-Type: application/octet-stream" \
  #             --data-binary @"$f"
  #         done
