name: Copy secrets to public repo

on:
  workflow_dispatch:

jobs:
  copy-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Copy secrets using Node.js script with libsodium
        env:
          GH_TOKEN: ${{ secrets.GH_PAT_SECRETS }}
          TARGET_REPO: oliwoli/hushcut-releases
          APPLE_ID_USERNAME: ${{ secrets.APPLE_ID_USERNAME }}
          APPLE_ID_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_DEVELOPER_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          APPLE_DEVELOPER_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
        run: |
          npm install libsodium-wrappers node-fetch@2
          node --input-type=module <<'EOF'
          import fetch from 'node-fetch';
          import sodium from 'libsodium-wrappers';

          async function encryptSecret(publicKeyBase64, secretValue) {
            await sodium.ready;
            const publicKey = sodium.from_base64(publicKeyBase64, sodium.base64_variants.ORIGINAL);
            const messageBytes = Buffer.from(secretValue, 'utf-8');
            const encryptedBytes = sodium.crypto_box_seal(messageBytes, publicKey);
            return sodium.to_base64(encryptedBytes, sodium.base64_variants.ORIGINAL);
          }

          (async () => {
            const token = process.env.GH_TOKEN;
            const [owner, repo] = process.env.TARGET_REPO.split('/');

            const secretsToCopy = {
              APPLE_ID_USERNAME: process.env.APPLE_ID_USERNAME,
              APPLE_ID_APP_SPECIFIC_PASSWORD: process.env.APPLE_ID_APP_SPECIFIC_PASSWORD,
              APPLE_TEAM_ID: process.env.APPLE_TEAM_ID,
              APPLE_DEVELOPER_CERTIFICATE_P12_BASE64: process.env.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64,
              APPLE_DEVELOPER_CERTIFICATE_PASSWORD: process.env.APPLE_DEVELOPER_CERTIFICATE_PASSWORD,
            };

            const res = await fetch(`https://api.github.com/repos/${owner}/${repo}/actions/secrets/public-key`, {
              headers: { Authorization: `token ${token}`, Accept: 'application/vnd.github.v3+json' },
            });
            if (!res.ok) throw new Error(`Failed to get public key: ${res.status}`);
            const keyData = await res.json();
            const keyId = keyData.key_id;
            const publicKey = keyData.key;

            for (const [name, value] of Object.entries(secretsToCopy)) {
              if (!value) {
                console.log(`Skipping ${name}, no value set`);
                continue;
              }
              const encrypted_value = await encryptSecret(publicKey, value);

              const putRes = await fetch(`https://api.github.com/repos/${owner}/${repo}/actions/secrets/${name}`, {
                method: 'PUT',
                headers: { Authorization: `token ${token}`, 'Content-Type': 'application/json' },
                body: JSON.stringify({ encrypted_value, key_id: keyId }),
              });

              if (!putRes.ok) {
                const errText = await putRes.text();
                throw new Error(`Failed to set secret ${name}: ${putRes.status} ${errText}`);
              }

              console.log(`Copied secret ${name}`);
            }
          })();
          EOF
